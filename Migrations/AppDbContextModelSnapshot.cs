// <auto-generated />
using System;
using EncoreTrack.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EncoreTrack.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("EncoreTrack.Models.AudienceMember", b =>
                {
                    b.Property<int>("AudienceMemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FirstVisitDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AudienceMemberID");

                    b.ToTable("AudienceMembers");
                });

            modelBuilder.Entity("EncoreTrack.Models.Concert", b =>
                {
                    b.Property<int>("ConcertID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ConcertDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcertName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ConcertID");

                    b.ToTable("Concerts");
                });

            modelBuilder.Entity("EncoreTrack.Models.ConcertVisit", b =>
                {
                    b.Property<int>("ConcertVisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AudienceMemberID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConcertID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConcertVisitID");

                    b.HasIndex("AudienceMemberID");

                    b.HasIndex("ConcertID");

                    b.ToTable("ConcertVisits");
                });

            modelBuilder.Entity("EncoreTrack.Models.ConcertVisit", b =>
                {
                    b.HasOne("EncoreTrack.Models.AudienceMember", "AudienceMember")
                        .WithMany("ConcertVisits")
                        .HasForeignKey("AudienceMemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EncoreTrack.Models.Concert", "Concert")
                        .WithMany("ConcertVisits")
                        .HasForeignKey("ConcertID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudienceMember");

                    b.Navigation("Concert");
                });

            modelBuilder.Entity("EncoreTrack.Models.AudienceMember", b =>
                {
                    b.Navigation("ConcertVisits");
                });

            modelBuilder.Entity("EncoreTrack.Models.Concert", b =>
                {
                    b.Navigation("ConcertVisits");
                });
#pragma warning restore 612, 618
        }
    }
}
